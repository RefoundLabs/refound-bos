"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetStrategy = void 0;
const createIframe = (widget) => {
    const connector = document.createElement("iframe");
    connector.src = widget;
    connector.style.border = "none";
    connector.style.zIndex = "10000";
    connector.style.position = "fixed";
    connector.style.display = "none";
    connector.style.top = "0";
    connector.style.left = "0";
    connector.style.width = "100%";
    connector.style.height = "100%";
    document.body.appendChild(connector);
    return connector;
};
class WidgetStrategy {
    constructor(widget = "https://my.herewallet.app/connector/index.html") {
        this.widget = widget;
        if (WidgetStrategy.connector == null) {
            WidgetStrategy.connector = createIframe(widget);
            WidgetStrategy.connector.addEventListener("load", () => {
                WidgetStrategy.isLoaded = true;
            });
        }
    }
    onRequested(id, request, reject) {
        if (WidgetStrategy.connector == null)
            return;
        WidgetStrategy.connector.style.display = "block";
        const loadHandler = () => {
            var _a, _b, _c;
            (_a = WidgetStrategy.connector) === null || _a === void 0 ? void 0 : _a.removeEventListener("load", loadHandler);
            (_c = (_b = WidgetStrategy.connector) === null || _b === void 0 ? void 0 : _b.contentWindow) === null || _c === void 0 ? void 0 : _c.postMessage(JSON.stringify({ type: "request", payload: { id, request } }), new URL(this.widget).origin);
        };
        if (WidgetStrategy.isLoaded)
            loadHandler();
        else
            WidgetStrategy.connector.addEventListener("load", loadHandler);
        this.messageHandler = (event) => {
            try {
                if (event.origin !== new URL(this.widget).origin)
                    return;
                if (JSON.parse(event.data).type === "reject")
                    reject();
            }
            catch (_a) { }
        };
        window.addEventListener("message", this.messageHandler);
    }
    onApproving() {
        var _a;
        if (WidgetStrategy.connector == null)
            return;
        (_a = WidgetStrategy.connector.contentWindow) === null || _a === void 0 ? void 0 : _a.postMessage(JSON.stringify({ type: "approving" }), new URL(this.widget).origin);
    }
    onSuccess() {
        this.close();
    }
    onFailed() {
        this.close();
    }
    close() {
        if (this.messageHandler) {
            window.removeEventListener("message", this.messageHandler);
            this.messageHandler = undefined;
        }
        if (WidgetStrategy.connector != null) {
            WidgetStrategy.connector.style.display = "none";
        }
    }
}
exports.WidgetStrategy = WidgetStrategy;
WidgetStrategy.isLoaded = false;
//# sourceMappingURL=WidgetStrategy.js.map