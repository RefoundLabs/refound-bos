import { Account } from "near-api-js";
import { FinalExecutionOutcome } from "near-api-js/lib/providers";
import { PublicKey } from "near-api-js/lib/utils/key_pair";
import BN from "bn.js";
import { HereCall, HereWalletProtocol, SignAndSendTransactionOptions, SignAndSendTransactionsOptions, SignMessageOptions, SignInOptions, HereInitializeOptions } from "./types";
export declare class HereWallet implements HereWalletProtocol {
    private readonly connection;
    private readonly defaultStrategy;
    private readonly authStorage;
    private readonly defaultProvider;
    constructor({ nodeUrl, networkId, authStorage, defaultStrategy, defaultProvider, }?: HereInitializeOptions);
    get rpc(): import("near-api-js/lib/providers").Provider;
    get signer(): import("near-api-js").Signer;
    get networkId(): string;
    account(id?: string): Promise<Account>;
    isSignedIn(): Promise<boolean>;
    signOut(): Promise<void>;
    getHereBalance(id?: string): Promise<BN>;
    getAvailableBalance(id?: string): Promise<BN>;
    getAccounts(): Promise<string[]>;
    getAccountId(): Promise<string>;
    switchAccount(id: string): Promise<void>;
    signIn({ contractId, allowance, methodNames, ...delegate }?: SignInOptions): Promise<string>;
    silentSignAndSendTransaction({ actions, receiverId, signerId }: HereCall): Promise<FinalExecutionOutcome>;
    signAndSendTransaction(opts: SignAndSendTransactionOptions): Promise<FinalExecutionOutcome>;
    /** Implement NEP0413 */
    signMessage({ message, receiver, nonce, ...delegate }: SignMessageOptions): Promise<{
        signature: Uint8Array;
        publicKey: PublicKey;
        message: string;
        receiver: string;
        accountId: string;
        nonce: number[];
    }>;
    signAndSendTransactions({ transactions, ...delegate }: SignAndSendTransactionsOptions): Promise<FinalExecutionOutcome[]>;
}
